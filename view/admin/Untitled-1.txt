 const unblockUser= async (req, res) => {
    try {
        const admin = req.session.userData;
        const id = req.query.id;

        // Find the user by ID
        const user = await User.findById(id);

        if (!user) {
            return res.status(404).send("User not found");
        }

        // Toggle the 'is_blocked' field
        user.is_blocked = !user.is_blocked;

        await user.save();

        res.redirect('/admin/userDetails');
    } catch (error) {
        console.log(error.message);
    }
};

         <td>
            <% if (user[i].is_blocked) { %>
                <a href="/admin/unblockUser?id=<%= user[i]._id.toString() %>">
                 
                   <p class="text-danger ms-4">Block</p>
                 
                </a>
              <% } else { %>
                <a href="/admin/unblockUser?id=<%= user[i]._id.toString() %>">                  
                    <p class="text-primary ms-4">Unblock</p>
                 
                </a>
              <% } %>
        </td>











         <td>
                                                      <% if(value.is_blocked) { %>
                                                        <a href="/admin/blockUser?id=<%= value._id.toString()%>">
                                                          <p class="text-danger ms-4">Unblock</p>
                                                        </a>
                                                        <% } else { %>
                                                          <a href="/admin/blockUser?id=<%= value._id.toString() %>">                  
                                                              <p class="text-primary ms-4">Block</p>
                                                           
                                                          </a>
                                                        <% } %>



                                                    </td>


                                                    ////////////////////

                                                     function fetchingUserId(id){
                        const userId =  id;
                        try {
                            const response =  fetch(`/admin/blockUser?id=${id}`,{
                                method:'GET',
                                headers:{
                                    'Content-Type' : 'application/json'
                                },
                                
                            })
                        } catch (error) {
                            console.log(error);
                        }
                        
                    }










const Order = require('../models/orderModel');
const ExcelJS = require('exceljs');
const fs = require("fs");
const path = require("path");

const getExcelSalesReport = async (req, res) => {
    try {
        const orders = await Order.find({status:"payment successfull"})
        .populate('user', 'email') 
        .populate({
          path: 'items.product',
          model: 'Product',
        })
        .populate('address');

         

        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('Sales Report');
        let serialNumber = 1;

        worksheet.columns = [
            { header: 'Serial Number', key: 'Sno', width: 10 },
            { header: 'UserID', key: 'userId', width: 10 },
            { header: 'Order Date', key: 'orderDate', width: 15, style: { numFmt: 'yyyy-mm-dd' } },
            { header: 'Name', key: 'userName', width: 10 },
            { header: 'Product', key: 'productName', width: 25 },
            { header: 'Quantity', key: 'quantity', width: 5 },
            { header: 'Total Amount', key: 'totalAmount', width: 10 },
            { header: 'Order status', key: 'orderStatus', width: 10 },
            { header: 'Payment Method', key: 'paymentMethod', width: 10 },
            { header: 'Address', key: 'address', width: 55 },
        ];

        worksheet.getRow(1).eachCell((cell) => {
            cell.font = { bold: true };
        });

        orders.forEach((eachOrder) => {
            eachOrder.items.forEach((item) => {
                const fullAddress = `${eachOrder.address.street}, ${eachOrder.address.city}, ${eachOrder.address.state}, ${eachOrder.address.pincode}`;
                const salesData = {
                    Sno: serialNumber++,
                    userId: eachOrder.user._id,
                    orderDate: eachOrder.orderDate,
                    userName: eachOrder.address.name,
                    productName: item.product.name,
                    quantity: item.quantity,
                    totalAmount: eachOrder.totalAmount,
                    orderStatus: eachOrder.status,
                    paymentMethod: eachOrder.paymentMethod,
                    address: fullAddress,
                };
                

                worksheet.addRow(salesData);
            });
        });

        const exportPath = path.resolve("public", "sales_report", "salesReport.xlsx");

        await workbook.xlsx.writeFile(exportPath);
        res.download(exportPath, 'sales_report.xlsx', (err) => {
            if (err) {
                res.status(500).send('Error sending the file');
            }
        });
    } catch (error) {
        console.log(error.message);
        res.status(500).send('Error generating the report');
    }
};

module.exports = {
    getExcelSalesReport
};