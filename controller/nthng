<nav aria-label="Page navigation">
                                <ul class="pagination">
                                  <% if (currentPage > 1) { %>
                                    <li class="page-item">
                                      <a class="page-link page-link-prev" href="/products?page=<%= currentPage - 1 %>" aria-label="Previous">
                                        <span aria-hidden="true"><i class="icon-long-arrow-left"></i></span>Prev
                                      </a>
                                    </li>
                                  <% } else { %>
                                    <li class="page-item disabled">
                                      <span class="page-link page-link-prev" aria-disabled="true">
                                        <span aria-hidden="true"><i class="icon-long-arrow-left"></i></span>Prev
                                      </span>
                                    </li>
                                  <% } %>
                              
                                  <% for (let i = 1; i <= totalPages; i++) { %>
                                    <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                                      <a class="page-link" href="/productsView?page=<%= i %>"><%= i %></a>
                                    </li>
                                  <% } %>
                              
                                  <li class="page-item-total">of <%= totalPages %></li>
                              
                                  <% if (currentPage < totalPages) { %>
                                    <li class="page-item">
                                      <a class="page-link page-link-next" href="/productsView?page=<%= currentPage + 1 %>" aria-label="Next">
                                        Next <span aria-hidden="true"><i class="icon-long-arrow-right"></i></span>
                                      </a>
                                    </li>
                                  <% } else { %>
                                    <li class="page-item disabled">
                                      <span class="page-link page-link-next" aria-disabled="true">
                                        Next <span aria-hidden="true"><i class="icon-long-arrow-right"></i></span>
                                      </span>
                                    </li>
                                  <% } %>
                                </ul>
                              </nav>








const {formatDate,generateHr,generateTableRow}=require('../helpers/createInvoice')
const Order=require('../models/orderModel')
const PDFDocument=require('pdfkit')
const fs=require("fs")


const generateInvoice=async(req,res)=>{
    try{
        const orderId=req.params.orderId;
        console.log(orderId);

        const orders = await Order.findById(orderId)
        .populate('user')
        .populate({
            path: 'address',
            model: 'Address',
        })
        .populate({
            path: 'items.product',
            model: 'Product',
        });


        const doc=new PDFDocument();

        const fileName=invoice_${orderId}.pdf;

        res.setHeader('content-Type','application/pdf');
        res.setHeader('Content-Disposition',attatchment;filename="${fileName})

        doc.pipe(res);

        doc

        .fillColor("#444444") 
        .fontSize(20) 
        .text('ZoneApple.com', 200, 50, { align: "right" })
        .text("682301", 200, 65, { align: "right" })
        .text("Maradu ", 200, 80, { align: "right" })
        .moveDown();

        doc 
        .fillColor("#444444") 
        .fontSize(20) 
        .text("Invoice", 50, 160);
        generateHr(doc, 185);
         const customerInformationTop=200;

         doc
          .fontSize(10)
          .text("Invoice Number:", 50, customerInformationTop)
          .font("Helvetica-Bold")
          .text(orders._id, 150, customerInformationTop)
          .font("Helvetica")
          .text("Invoice Date:", 50, customerInformationTop + 15)
          .text(formatDate(new Date()), 150, customerInformationTop + 15)
          .text("Total Amount (Rs):", 50, customerInformationTop + 30)
          .text(
              Rs ${orders.totalAmount}, 150, customerInformationTop + 30
          )
         .font("Helvetica-Bold")
         .text(orders.address.name,300,customerInformationTop)
         .font("Helvetica")
         .text(orders.address.houseName,300,customerInformationTop + 15)
         .text(
            ${orders.address.city}, ${orders.address.state}, India,
            300,
            customerInformationTop + 30
        )
        .moveDown();

    generateHr(doc, 252);

    const invoiceTableTop = 330;

    doc.font("Helvetica-Bold");
    generateTableRow(
        doc,
        invoiceTableTop,
        "Item",
        "Quantity",
        "Line Total"
    );
    generateHr(doc, invoiceTableTop + 20);
    doc.font("Helvetica");

    let position = 0;
    for (let i = 0; i < orders.items.length; i++) {
        position = invoiceTableTop + (i + 1) * 30;
        generateTableRow(
            doc,
            position,
            orders.items[i].product.name,
            orders.items[i].quantity,
            Rs ${orders.items[i].product.discountPrice},
        );
        
    }

    generateHr(doc, position + 20); 

    const totalPricePosition = position + 40; 
    
    doc
        .font("Helvetica")
        .text("Total Amount (Rs) + shipping charges:", 50, totalPricePosition)
        .text(Rs ${orders.price}, 250, totalPricePosition)
        .text("Coupon Code:", 50, totalPricePosition + 15)
        .text(${orders.couponCode}, 250, totalPricePosition + 15)
        .text("Coupon Discount (Rs):", 50, totalPricePosition + 30)
        .text(Rs ${orders.couponDiscount}, 250, totalPricePosition + 30);
    
    const totalWithDiscountPosition = totalPricePosition + 60; 
    
    doc
        .font("Helvetica-Bold")
        .text("Total  + shipping charges:", 50, totalWithDiscountPosition)
        .text(Rs ${orders.totalAmount}, 250, totalWithDiscountPosition); 
    
    doc.end();
} catch (err) {
    console.error(err);
    res.status(500).send('Error generating the invoice');
}
}
 
module.exports = {
generateInvoice
}









helper//



function generateHr(doc, y) {
  doc.strokeColor('#aaaaaa')
      .lineWidth(1)
      .moveTo(50, y)
      .lineTo(550, y)
      .stroke();
}

function formatDate(date) {
  const day = date.getDate();
  const month = date.getMonth() + 1;
  const year = date.getFullYear();

  return year + '/' + month + '/' + day;
}

function generateTableRow(doc, y, item, quantity, lineTotal) {
  const itemMaxWidth = 250;
  const itemFontSize = 10;

  const lines = doc
      .fontSize(itemFontSize)
      .text(item, 50, y, { width: itemMaxWidth, align: 'left', lineBreak: true });

  const itemHeight = lines.length * itemFontSize + 30;
  doc
      .text(quantity, 370, y, { width: 90, align: 'right' })
      .text(lineTotal, 0, y, { align: 'right' });

  const rowHeight = Math.max(itemHeight, 40);
  return rowHeight;
}

function generateTableRowSales(doc, y, item, quantity, userid, date, lineTotal) {
  const itemMaxWidth = 150;
  const itemFontSize = 6;

  const lines = doc
      .fontSize(itemFontSize)
      .text(item, 50, y, { width: itemMaxWidth, align: 'left', lineBreak: true });

  const itemHeight = lines.length * itemFontSize;

  doc
      .text(quantity, 150, y, { width: 90, align: 'right' })
      .text(userid, 250, y, { width: 90, align: 'right' })
      .text(date, 350, y, { width: 90, align: 'right' })
      .text(lineTotal, 0, y, { align: 'right' });

  const rowHeight = Math.max(itemHeight, 40);
  return rowHeight;
}

module.exports = {
  formatDate,
  generateHr,
  generateTableRow,
  generateTableRowSales
};


